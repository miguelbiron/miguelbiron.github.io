<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Finance on The MBLog</title>
    <link>/tags/finance/</link>
    <description>Recent content in Finance on The MBLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Sat, 08 Dec 2018 19:30:11 -0800</lastBuildDate>
    
	<atom:link href="/tags/finance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BIDC: Bayesian Inference for Default Correlations</title>
      <link>/2018/12/08/bidc-bayesian-inference-for-default-correlations/</link>
      <pubDate>Sat, 08 Dec 2018 19:30:11 -0800</pubDate>
      
      <guid>/2018/12/08/bidc-bayesian-inference-for-default-correlations/</guid>
      <description>I just released a package on Github called BIDC, which stands for Bayesian Inference for Default Correlations. I started working on this together with my colleague Victor Medina back when I was a financial stability analyst at the Superintendency of Banks and Financial Institutions in Chile. In fact, you can see the slides from our presentation at the 2017 version of SBIF conference here (Biron and Medina 2017). The difference is that, instead of Stan, the method available in BIDC uses a Metropolis-Hastings-within-Gibbs MCMC sampler (Gilks 1996) written entirely in base R, that runs much faster.</description>
    </item>
    
    <item>
      <title>Demo for simple payments with linear programming</title>
      <link>/2018/02/17/demo-for-simple-payments-with-linear-programming/</link>
      <pubDate>Sat, 17 Feb 2018 10:08:00 -0300</pubDate>
      
      <guid>/2018/02/17/demo-for-simple-payments-with-linear-programming/</guid>
      <description>I built a webapp that implements the solution for simplifying payments described in my previous post. It is written in Javascript and uses the LALOLib library for linear algebra and solving the linear program.
Input data Using these input forms, you will enter the net amount owed by/to each participant: a positive number means that person is owed money, and a negative number means that person needs to pay other people (this is the $b$ vector in the mathematical formulation).</description>
    </item>
    
    <item>
      <title>Simplifying payments with linear programming</title>
      <link>/2018/02/09/simplifying-payments-with-linear-programming/</link>
      <pubDate>Fri, 09 Feb 2018 17:40:00 -0300</pubDate>
      
      <guid>/2018/02/09/simplifying-payments-with-linear-programming/</guid>
      <description>Update: I have built a demo webapp implementing the solution presented here. You should try it!
Imagine you have a group of $n$ friends and that you regularly go out for drinks with them (say, a couple of times a week). At each of these meetings, a different member of the group pays for the bill, but you keep track of who consumed what (by using one of these popular apps, for example).</description>
    </item>
    
  </channel>
</rss>